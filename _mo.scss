@mixin above($above, $vertical: false) {
  @if $vertical {
    @media screen and (min-height: $above){
      @content;
    }
  } @else {
    @media screen and (min-width: $above){
      @content;
    }
  }
}

@mixin below($below, $vertical: false) {
  @if $vertical {
    @media screen and (max-height: $below){
      @content;
    }
  } @else {
    @media screen and (max-width: $below){
      @content;
    }
  }
}

@mixin between($low, $high, $vertical: false) {
  @if $vertical {
    @media screen and (max-height: $low), screen and (max-height: $high) {
      @content
    }
  } @else {
    @media screen and (max-width: $low), screen and (max-width: $high) {
      @content;
    }
  }
}

@mixin hide-at($screen-size) {
  @media screen and (max-width: $screen-size) {
    display: none;
  }
}

@mixin full-width-at($screen-size) {
  @media screen and (max-width: $screen-size) {
    width: 100%;
  }
}

@mixin center-text-at($screen-size) {
  @media screen and (max-width: $screen-size) {
    text-align: center;
  }
}

@mixin bg-color($r, $g, $b: false, $a: false) {
  $background-color: #fff;
  $ie-8: "\0/";

  @if $b {
    $background-color: rgba($r, $g, $b, $a);
  } @else {
    $background-color: transparentize($r, 1 - $g);
  }

  background-color: opacify($background-color, 1);
  background-color: $background-color;

  background-color: transparent#{$ie-8};
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($background-color)}', endColorstr='#{ie-hex-str($background-color)}')#{$ie-8};
  zoom: 1#{$ie-8};

  @content;
}

@mixin pos($args...) {
  $fill: false;
  $positions: static, absolute, fixed, relative, initial, inherit;
  $props: top, right, bottom, left;

  // Set to fill mode if necessary.
  @if index($args, "fill") { $fill: true }

  $i: 1;
  @each $arg in $args {
    @if $arg == "fill" {

    } @else if index($positions, $arg) {
      position: $arg;

    } @else if $i <= length($props) {
      @if $arg != false {
        #{nth($props, $i)}: $arg;
      } @else if $fill {
        #{nth($props, $i)}: 0;
      }
      $i: $i + 1;
    }
  }

  // If necessary, fill in the rest of the properties.
  @if $fill {
    @while $i <= length($props) {
      #{nth($props, $i)}: 0;
      $i: $i + 1;
    }
  }

  @content;
}

@mixin ellipsis($width: false) {
  overflow:       hidden;
  text-overflow:  ellipsis;
  white-space:    nowrap;
  @if $width { width: $width };
}

@mixin size($width, $height: $width) {
  height: $height;
  width:  $width;
}

@mixin retina-background-image($name, $extension: png) {
  background-image: url("#{$name}.#{$extension}");

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (  min--moz-device-pixel-ratio: 2),
  only screen and (    -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url("#{$name}@2x.#{$extension}");
    background-size: cover;
  }
}
